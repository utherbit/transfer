package main

import (
	"fmt"
	"strings"
)

const transferTemplate = `// Code generated by klad.rupu.ru/rupuru/eda/backend/cmd/gen/transfer; DO NOT EDIT.

package {{.Package}}

{{ if .Imports -}}
import (
{{- range .Imports }}
	{{.}}
{{- end }}
)

{{ end -}}

` + `//go:generate go run klad.rupu.ru/rupuru/eda/backend/cmd/gen/transfer {{.StructName}}
type {{.StructName}}Transfer struct{ {{.StructName}} }

func (t *{{.StructName}}Transfer) Base() {{.StructName}} { return t.{{.StructName}} }
{{range .Fields}}
func (t *{{$.StructName}}Transfer) {{.PubName}}() {{.Type}}         { return t.{{$.StructName}}.{{.Name}} }
func (t *{{$.StructName}}Transfer) Set{{.PubName}}(value {{.Type}}) { t.{{$.StructName}}.{{.Name}} = value }
{{ end -}}
`

type StructInfo struct {
	SourceFile string
	Package    string
	StructName string
	// Fields only private
	Fields  []Field
	Imports []Import
}

type Field struct {
	Name   string
	Type   string
	Getter string
	Setter string
}

func (f *Field) PubName() string {
	pubName := f.Name

	// ID всегда большими буквами
	if strings.HasPrefix(pubName, "id") {
		pubName = strings.Replace(pubName, "id", "ID", 1)
	}

	return strings.ToUpper(pubName[:1]) + pubName[1:]
}

type Import struct {
	Alias string
	Path  string
}

func (i *Import) String() string {
	if i.Alias == "" {
		return fmt.Sprintf(`"%s"`, i.Path)
	}

	return fmt.Sprintf(`%s "%s"`, i.Alias, i.Path)
}
